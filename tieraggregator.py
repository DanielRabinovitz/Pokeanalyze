import matchup_calcs as mc
from pokedex import Pokedex
from pprint import pprint

dex = Pokedex()

#takes in two tier names and spits out the json for avg matchups of every pokemon in one tier vs every pokemon in other
#e.g. tier_vs_tier("UU", "OU") gets a dict of the avg matchup of each UU mon into each OU mon
def tier_vs_tier(tier1, tier2):

    #get pokes to iterate over
    pokes = dex.filter_by_tier(tier1)

    #get matchup vs tier
    matchups = [mc.poke_vs_tier(poke, tier2) for poke in pokes]

    return matchups

#prints the average of of averages, expects to recieve a dict generated by mc.avg_matchups()
def matchup_avg_of_avgs(avg_list):

    total_defense = 0
    total_offense = 0

    for scores in avg_list:
        total_defense += scores['Avg_Defense']
        total_offense += scores['Avg_Offense']

    # Calculate averages
    average_defense = total_defense / len(avg_list)
    average_offense = total_offense / len(avg_list)

    return {'Avg_Defense': round(average_defense, 2),
            'Avg_Offense': round(average_offense, 2)}


#Calculates the tier-wide average of offense and defense scores against other pokemon of the same tier 
def tier_avg(tier):

    scores = matchup_avg_of_avgs(tier_vs_tier(tier, tier))

    return scores







